---
const { section } = Astro.props;
import { createMarkdownProcessor } from '@astrojs/markdown-remark';
import { JSDOM } from 'jsdom';
import { LinkCard, CardGrid } from '@astrojs/starlight/components';

const md = await createMarkdownProcessor();
const url = 'https://raw.githubusercontent.com/tauri-apps/awesome-tauri/dev/README.md';
const res = await fetch(url);
const content = await md.render(await res.text());
const dom = new JSDOM('<!DOCTYPE html>' + content.code);
const document = dom.window.document;
let categories = document.querySelectorAll('h3');
let cards = [];
const sections = {
    'plugins': 'Plugins',
    'integrations': 'Integrations',
    'articles': 'Articles',
    'guides': 'Guides',
    'tutorials': 'Tutorials',
    'templates': 'Templates',
    'applications-audio-video': 'Audio & Video',
    'applications-chatgpt-clients': 'ChatGPT clients',
    'applications-data': 'Data',
    'applications-developer-tools': 'Developer tools',
    'applications-email-feeds': 'Email & Feeds',
    'applications-file-management': 'File management',
    'applications-finance': 'Finance',
    'applications-gaming': 'Gaming',
    'applications-information': 'Information',
    'applications-learning': 'Learning',
    'applications-networking': 'Networking',
    'applications-office-writing': 'Office & Writing',
    'applications-productivity': 'Productivity',
    'applications-security': 'Security',
    'applications-social-media': 'Social media',
    'applications-utilities': 'Utilities',
}

for (const header of categories) {
    if (header.textContent === sections[section]) {
        let list = header.nextSibling.nextSibling as HTMLElement;
        for (const entry: HTMLLinkElement of list.children) {
            let img = entry.children[1]
            if(img && img.src && (img.src.includes('closed') || img.src.includes('paid')))
                continue
            img = entry.children[2]
            if(img && img.src && (img.src.includes('closed') || img.src.includes('paid')))
                continue
            cards.push({
                href: entry.children[0].href,
                name: entry.children[0].textContent,
                description: entry.textContent.split(' - ')[1],
            });
        }
    }
}
---

<CardGrid>
    {
        cards.map((card) => (
                <LinkCard title={card.name} description={card.description} href={card.href} />
        ))
    }
</CardGrid>

<style is:global>
    .sl-link-card {
        background: var(--sl-color-black)
    }
</style>